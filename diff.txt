diff --git a/packages/node_modules/@node-red/editor-client/src/js/ui/workspaces.js b/packages/node_modules/@node-red/editor-client/src/js/ui/workspaces.js
index 1f5cdf0..1a71577 100644
--- a/packages/node_modules/@node-red/editor-client/src/js/ui/workspaces.js
+++ b/packages/node_modules/@node-red/editor-client/src/js/ui/workspaces.js
@@ -58,6 +58,9 @@ RED.workspaces = (function() {
             if (!ws.closeable) {
                 ws.hideable = true;
             }
+            if (!ws.hasOwnProperty('locked')) {
+                ws.locked = false
+            }
             workspace_tabs.addTab(ws,targetIndex);
 
             var hiddenTabs = JSON.parse(RED.settings.getLocal("hiddenTabs")||"{}");
@@ -75,11 +78,15 @@ RED.workspaces = (function() {
                 type: "tab",
                 id: tabId,
                 disabled: false,
+                locked: false,
                 info: "",
                 label: RED._('workspace.defaultName',{number:workspaceIndex}),
                 env: [],
-                hideable: true
+                hideable: true,
             };
+            if (!skipHistoryEntry) {
+                ws.added = true
+            }
             RED.nodes.addWorkspace(ws,targetIndex);
             workspace_tabs.addTab(ws,targetIndex);
 
@@ -89,8 +96,7 @@ RED.workspaces = (function() {
                 RED.nodes.dirty(true);
             }
         }
-        $("#red-ui-tab-"+(ws.id.replace(".","-"))).attr("flowname",ws.label)
-
+        $("#red-ui-tab-"+(ws.id.replace(".","-"))).attr("flowname",ws.label).toggleClass('red-ui-workspace-changed',!!(ws.contentsChanged || ws.changed || ws.added));
         RED.view.focus();
         return ws;
     }
@@ -99,6 +105,9 @@ RED.workspaces = (function() {
         if (workspaceTabCount === 1) {
             return;
         }
+        if (ws.locked) {
+            return
+        }
         var workspaceOrder = RED.nodes.getWorkspaceOrder();
         ws._index = workspaceOrder.indexOf(ws.id);
         removeWorkspace(ws);
@@ -119,13 +128,206 @@ RED.workspaces = (function() {
                 RED.editor.editSubflow(subflow);
             }
         } else {
-            RED.editor.editFlow(workspace);
+            if (!workspace.locked) {
+                RED.editor.editFlow(workspace);
+            }
         }
     }
 
 
     var workspace_tabs;
     var workspaceTabCount = 0;
+
+    function getMenuItems(isMenuButton, tab) {
+        let hiddenFlows = new Set()
+        for (let i = 0; i < hideStack.length; i++) {
+            let ids = hideStack[i]
+            if (!Array.isArray(ids)) {
+                ids = [ids]
+            }
+            ids.forEach(id => {
+                if (RED.nodes.workspace(id)) {
+                    hiddenFlows.add(id)
+                }
+            })
+        }
+        const hiddenflowCount = hiddenFlows.size;
+        let activeWorkspace = tab || RED.nodes.workspace(RED.workspaces.active()) || RED.nodes.subflow(RED.workspaces.active())
+        let isFlowDisabled = activeWorkspace ? activeWorkspace.disabled : false
+        const currentTabs = workspace_tabs.listTabs();
+        let flowCount = 0;
+        currentTabs.forEach(tab => {
+            if (RED.nodes.workspace(tab)) {
+                flowCount++;
+            }
+        });
+
+        let isCurrentLocked = RED.workspaces.isLocked()
+        if (tab) {
+            isCurrentLocked = tab.locked
+        }
+
+        var menuItems = []
+        if (isMenuButton) {
+            menuItems.push({
+                id:"red-ui-tabs-menu-option-search-flows",
+                label: RED._("workspace.listFlows"),
+                onselect: "core:list-flows"
+            },
+            {
+                id:"red-ui-tabs-menu-option-search-subflows",
+                label: RED._("workspace.listSubflows"),
+                onselect: "core:list-subflows"
+            },
+            null)
+        }
+        menuItems.push(
+            {
+                id:"red-ui-tabs-menu-option-add-flow",
+                label: RED._("workspace.addFlow"),
+                onselect: "core:add-flow"
+            }
+        )
+        if (isMenuButton || !!tab) {
+            menuItems.push(
+                {
+                    id:"red-ui-tabs-menu-option-add-flow-right",
+                    label: RED._("workspace.addFlowToRight"),
+                    shortcut: RED.keyboard.getShortcut("core:add-flow-to-right"),
+                    onselect: function() {
+                        RED.actions.invoke("core:add-flow-to-right", tab)
+                    }
+                },
+                null
+            )
+            if (activeWorkspace && activeWorkspace.type === 'tab') {
+                menuItems.push(
+                    isFlowDisabled ? {
+                        label: RED._("workspace.enableFlow"),
+                        shortcut: RED.keyboard.getShortcut("core:enable-flow"),
+                        onselect: function() {
+                            RED.actions.invoke("core:enable-flow", tab?tab.id:undefined)
+                        },
+                        disabled: isCurrentLocked
+                    } : {
+                        label: RED._("workspace.disableFlow"),
+                        shortcut: RED.keyboard.getShortcut("core:disable-flow"),
+                        onselect: function() {
+                            RED.actions.invoke("core:disable-flow", tab?tab.id:undefined)
+                        },
+                        disabled: isCurrentLocked
+                    },
+                    isCurrentLocked? {
+                        label: RED._("workspace.unlockFlow"),
+                        shortcut: RED.keyboard.getShortcut("core:unlock-flow"),
+                        onselect: function() {
+                            RED.actions.invoke('core:unlock-flow', tab?tab.id:undefined)
+                        }
+                    } : {
+                        label: RED._("workspace.lockFlow"),
+                        shortcut: RED.keyboard.getShortcut("core:lock-flow"),
+                        onselect: function() {
+                            RED.actions.invoke('core:lock-flow', tab?tab.id:undefined)
+                        }
+                    },
+                    null
+                )
+            }
+            const activeIndex = currentTabs.findIndex(id => (activeWorkspace && (id === activeWorkspace.id)));
+            menuItems.push(
+                {
+                    label: RED._("workspace.moveToStart"),
+                    shortcut: RED.keyboard.getShortcut("core:move-flow-to-start"),
+                    onselect: function() {
+                        RED.actions.invoke("core:move-flow-to-start", tab?tab.id:undefined)
+                    },
+                    disabled: activeIndex === 0
+                },
+                {
+                    label: RED._("workspace.moveToEnd"),
+                    shortcut: RED.keyboard.getShortcut("core:move-flow-to-end"),
+                    onselect: function() {
+                        RED.actions.invoke("core:move-flow-to-end", tab?tab.id:undefined)
+                    },
+                    disabled: activeIndex === currentTabs.length - 1
+                }
+            )
+        }
+        menuItems.push(null)
+        if (isMenuButton || !!tab) {
+            menuItems.push(
+                {
+                    id:"red-ui-tabs-menu-option-add-hide-flows",
+                    label: RED._("workspace.hideFlow"),
+                    shortcut: RED.keyboard.getShortcut("core:hide-flow"),
+                    onselect: function() {
+                        RED.actions.invoke("core:hide-flow", tab)
+                    }
+                },
+                {
+                    id:"red-ui-tabs-menu-option-add-hide-other-flows",
+                    label: RED._("workspace.hideOtherFlows"),
+                    shortcut: RED.keyboard.getShortcut("core:hide-other-flows"),
+                    onselect: function() {
+                        RED.actions.invoke("core:hide-other-flows", tab)
+                    }
+                }
+            )
+
+        }
+        
+        menuItems.push(
+            {
+                id:"red-ui-tabs-menu-option-add-hide-all-flows",
+                label: RED._("workspace.hideAllFlows"),
+                onselect: "core:hide-all-flows",
+                disabled: (hiddenflowCount === flowCount)
+            },
+            {
+                id:"red-ui-tabs-menu-option-add-show-all-flows",
+                disabled: hiddenflowCount === 0,
+                label: RED._("workspace.showAllFlows", { count: hiddenflowCount }),
+                onselect: "core:show-all-flows"
+            },
+            {
+                id:"red-ui-tabs-menu-option-add-show-last-flow",
+                disabled: hideStack.length === 0,
+                label: RED._("workspace.showLastHiddenFlow"),
+                onselect: "core:show-last-hidden-flow"
+            }
+        )
+        if (tab) {
+            menuItems.push(
+                null,
+                {
+                    label: RED._("common.label.delete"),
+                    onselect: function() {
+                        if (tab.type === 'tab') {
+                            RED.workspaces.delete(tab)
+                        } else if (tab.type === 'subflow') {
+                            RED.subflow.delete(tab.id)
+                        }
+                    },
+                    disabled: isCurrentLocked || (workspaceTabCount === 1)
+                },
+                {
+                    label: RED._("menu.label.export"),
+                    shortcut: RED.keyboard.getShortcut("core:show-export-dialog"),
+                    onselect: function() {
+                        RED.workspaces.show(tab.id)
+                        RED.actions.invoke('core:show-export-dialog', null, 'flow')
+                    }
+                }
+            )
+        }
+        // if (isMenuButton && hiddenflowCount > 0) {
+        //     menuItems.unshift({
+        //         label: RED._("workspace.hiddenFlows",{count: hiddenflowCount}),
+        //         onselect: "core:list-hidden-flows"
+        //     })
+        // }
+        return menuItems;
+    }
     function createWorkspaceTabs() {
         workspace_tabs = RED.tabs.create({
             id: "red-ui-workspace-tabs",
@@ -137,8 +339,9 @@ RED.workspaces = (function() {
                     $("#red-ui-workspace-chart").show();
                     activeWorkspace = tab.id;
                     window.location.hash = 'flow/'+tab.id;
-                    $("#red-ui-workspace").toggleClass("red-ui-workspace-disabled",!!tab.disabled);
-                    } else {
+                    $("#red-ui-workspace").toggleClass("red-ui-workspace-disabled", !!tab.disabled);
+                    $("#red-ui-workspace").toggleClass("red-ui-workspace-locked", !!tab.locked);
+                } else {
                     $("#red-ui-workspace-chart").hide();
                     activeWorkspace = 0;
                     window.location.hash = '';
@@ -169,6 +372,18 @@ RED.workspaces = (function() {
                 if (tab.disabled) {
                     $("#red-ui-tab-"+(tab.id.replace(".","-"))).addClass('red-ui-workspace-disabled');
                 }
+                $('<span class="red-ui-workspace-locked-icon"><i class="fa fa-lock"></i> </span>').prependTo("#red-ui-tab-"+(tab.id.replace(".","-"))+" .red-ui-tab-label");
+                if (tab.locked) {
+                    $("#red-ui-tab-"+(tab.id.replace(".","-"))).addClass('red-ui-workspace-locked');
+                }
+
+                const changeBadgeContainer = $('<svg class="red-ui-flow-tab-changed red-ui-flow-node-changed" width="10" height="10" viewBox="-1 -1 12 12"></svg>').appendTo("#red-ui-tab-"+(tab.id.replace(".","-")))
+                const changeBadge = document.createElementNS("http://www.w3.org/2000/svg","circle");
+                changeBadge.setAttribute("cx",5);
+                changeBadge.setAttribute("cy",5);
+                changeBadge.setAttribute("r",5);
+                changeBadgeContainer.append(changeBadge)
+
                 RED.menu.setDisabled("menu-item-workspace-delete",activeWorkspace === 0 || workspaceTabCount <= 1);
                 if (workspaceTabCount === 1) {
                     showWorkspace();
@@ -189,13 +404,19 @@ RED.workspaces = (function() {
                 RED.history.push({
                     t:'reorder',
                     workspaces: {
-                        from:oldOrder,
-                        to:newOrder
+                        from: oldOrder,
+                        to: newOrder
                     },
                     dirty:RED.nodes.dirty()
                 });
-                RED.nodes.dirty(true);
-                setWorkspaceOrder(newOrder);
+                // Only mark flows dirty if flow-order has changed (excluding subflows)
+                const filteredOldOrder = oldOrder.filter(id => !!RED.nodes.workspace(id))
+                const filteredNewOrder = newOrder.filter(id => !!RED.nodes.workspace(id))
+
+                if (JSON.stringify(filteredOldOrder) !== JSON.stringify(filteredNewOrder)) {
+                    RED.nodes.dirty(true);
+                    setWorkspaceOrder(newOrder);
+                }
             },
             onselect: function(selectedTabs) {
                 RED.view.select(false)
@@ -214,12 +435,12 @@ RED.workspaces = (function() {
             },
             onhide: function(tab) {
                 hideStack.push(tab.id);
-
-                var hiddenTabs = JSON.parse(RED.settings.getLocal("hiddenTabs")||"{}");
-                hiddenTabs[tab.id] = true;
-                RED.settings.setLocal("hiddenTabs",JSON.stringify(hiddenTabs));
-
-                RED.events.emit("workspace:hide",{workspace: tab.id})
+                if (tab.type === "tab") {
+                    var hiddenTabs = JSON.parse(RED.settings.getLocal("hiddenTabs")||"{}");
+                    hiddenTabs[tab.id] = true;
+                    RED.settings.setLocal("hiddenTabs",JSON.stringify(hiddenTabs));
+                    RED.events.emit("workspace:hide",{workspace: tab.id})
+                }
             },
             onshow: function(tab) {
                 removeFromHideStack(tab.id);
@@ -234,77 +455,8 @@ RED.workspaces = (function() {
             scrollable: true,
             addButton: "core:add-flow",
             addButtonCaption: RED._("workspace.addFlow"),
-            menu: function() {
-                var menuItems = [
-                    {
-                        id:"red-ui-tabs-menu-option-search-flows",
-                        label: RED._("workspace.listFlows"),
-                        onselect: "core:list-flows"
-                    },
-                    {
-                        id:"red-ui-tabs-menu-option-search-subflows",
-                        label: RED._("workspace.listSubflows"),
-                        onselect: "core:list-subflows"
-                    },
-                    null,
-                    {
-                        id:"red-ui-tabs-menu-option-add-flow",
-                        label: RED._("workspace.addFlow"),
-                        onselect: "core:add-flow"
-                    },
-                    {
-                        id:"red-ui-tabs-menu-option-add-flow-right",
-                        label: RED._("workspace.addFlowToRight"),
-                        onselect: "core:add-flow-to-right"
-                    },
-                    null,
-                    {
-                        id:"red-ui-tabs-menu-option-add-hide-flows",
-                        label: RED._("workspace.hideFlow"),
-                        onselect: "core:hide-flow"
-                    },
-                    {
-                        id:"red-ui-tabs-menu-option-add-hide-other-flows",
-                        label: RED._("workspace.hideOtherFlows"),
-                        onselect: "core:hide-other-flows"
-                    },
-                    {
-                        id:"red-ui-tabs-menu-option-add-show-all-flows",
-                        label: RED._("workspace.showAllFlows"),
-                        onselect: "core:show-all-flows"
-                    },
-                    {
-                        id:"red-ui-tabs-menu-option-add-hide-all-flows",
-                        label: RED._("workspace.hideAllFlows"),
-                        onselect: "core:hide-all-flows"
-                    },
-                    {
-                        id:"red-ui-tabs-menu-option-add-show-last-flow",
-                        label: RED._("workspace.showLastHiddenFlow"),
-                        onselect: "core:show-last-hidden-flow"
-                    }
-                ]
-                let hiddenFlows = new Set()
-                for (let i = 0; i < hideStack.length; i++) {
-                    let ids = hideStack[i]
-                    if (!Array.isArray(ids)) {
-                        ids = [ids]
-                    }
-                    ids.forEach(id => {
-                        if (RED.nodes.workspace(id)) {
-                            hiddenFlows.add(id)
-                        }
-                    })
-                }
-                const flowCount = hiddenFlows.size;
-                if (flowCount > 0) {
-                    menuItems.unshift({
-                        label: RED._("workspace.hiddenFlows",{count: flowCount}),
-                        onselect: "core:list-hidden-flows"
-                    })
-                }
-                return menuItems;
-            }
+            menu: function() { return getMenuItems(true) },
+            contextmenu: function(tab) { return getMenuItems(false, tab) }
         });
         workspaceTabCount = 0;
     }
@@ -355,16 +507,33 @@ RED.workspaces = (function() {
         });
 
         RED.actions.add("core:add-flow",function(opts) { addWorkspace(undefined,undefined,opts?opts.index:undefined)});
-        RED.actions.add("core:add-flow-to-right",function(opts) { addWorkspace(undefined,undefined,workspace_tabs.activeIndex()+1)});
+        RED.actions.add("core:add-flow-to-right",function(workspace) {
+            let index
+            if (workspace) {
+                index = workspace_tabs.getTabIndex(workspace.id)+1
+            } else {
+                index = workspace_tabs.activeIndex()+1
+            }
+            addWorkspace(undefined,undefined,index)
+        });
         RED.actions.add("core:edit-flow",editWorkspace);
         RED.actions.add("core:remove-flow",removeWorkspace);
         RED.actions.add("core:enable-flow",enableWorkspace);
         RED.actions.add("core:disable-flow",disableWorkspace);
-
-        RED.actions.add("core:hide-flow", function() {
-            var selection = workspace_tabs.selection();
-            if (selection.length === 0) {
-                selection = [{id:activeWorkspace}]
+        RED.actions.add("core:lock-flow",lockWorkspace);
+        RED.actions.add("core:unlock-flow",unlockWorkspace);
+        RED.actions.add("core:move-flow-to-start", function(id) { moveWorkspace(id, 'start') });
+        RED.actions.add("core:move-flow-to-end", function(id) { moveWorkspace(id, 'end') });
+
+        RED.actions.add("core:hide-flow", function(workspace) {
+            let selection
+            if (workspace) {
+                selection = [workspace]
+            } else {
+                selection = workspace_tabs.selection();
+                if (selection.length === 0) {
+                    selection = [{id:activeWorkspace}]
+                }
             }
             var hiddenTabs = [];
             selection.forEach(function(ws) {
@@ -378,10 +547,15 @@ RED.workspaces = (function() {
             workspace_tabs.clearSelection();
         })
 
-        RED.actions.add("core:hide-other-flows", function() {
-            var selection = workspace_tabs.selection();
-            if (selection.length === 0) {
-                selection = [{id:activeWorkspace}]
+        RED.actions.add("core:hide-other-flows", function(workspace) {
+            let selection
+            if (workspace) {
+                selection = [workspace]
+            } else {
+                selection = workspace_tabs.selection();
+                if (selection.length === 0) {
+                    selection = [{id:activeWorkspace}]
+                }
             }
             var selected = new Set(selection.map(function(ws) { return ws.id }))
 
@@ -471,6 +645,11 @@ RED.workspaces = (function() {
                 RED.workspaces.show(viewStack[++viewStackPos],true);
             }
         })
+
+        RED.events.on("flows:change", (ws) => {
+            $("#red-ui-tab-"+(ws.id.replace(".","-"))).toggleClass('red-ui-workspace-changed',!!(ws.contentsChanged || ws.changed || ws.added));
+        })
+
         hideWorkspace();
     }
 
@@ -486,7 +665,7 @@ RED.workspaces = (function() {
     }
     function setWorkspaceState(id,disabled) {
         var workspace = RED.nodes.workspace(id||activeWorkspace);
-        if (!workspace) {
+        if (!workspace || workspace.locked) {
             return;
         }
         if (workspace.disabled !== disabled) {
@@ -521,11 +700,47 @@ RED.workspaces = (function() {
             }
         }
     }
+    function lockWorkspace(id) {
+        setWorkspaceLockState(id,true);
+    }
+    function unlockWorkspace(id) {
+        setWorkspaceLockState(id,false);
+    }
+    function setWorkspaceLockState(id,locked) {
+        var workspace = RED.nodes.workspace(id||activeWorkspace);
+        if (!workspace) {
+            return;
+        }
+        if (workspace.locked !== locked) {
+            var changes = { locked: workspace.locked };
+            workspace.locked = locked;
+            $("#red-ui-tab-"+(workspace.id.replace(".","-"))).toggleClass('red-ui-workspace-locked',!!workspace.locked);
+            if (!id || (id === activeWorkspace)) {
+                $("#red-ui-workspace").toggleClass("red-ui-workspace-locked",!!workspace.locked);
+            }
+            var historyEvent = {
+                t: "edit",
+                changes:changes,
+                node: workspace,
+                dirty: RED.nodes.dirty()
+            }
+            workspace.changed = true;
+            RED.history.push(historyEvent);
+            RED.events.emit("flows:change",workspace);
+            RED.nodes.dirty(true);
+            RED.nodes.filterNodes({z:workspace.id}).forEach(n => n.dirty = true)
+            RED.view.redraw(true);
+        }
+    }
 
     function removeWorkspace(ws) {
         if (!ws) {
-            deleteWorkspace(RED.nodes.workspace(activeWorkspace));
+            ws = RED.nodes.workspace(activeWorkspace)
+            if (ws && !ws.locked) {
+                deleteWorkspace(RED.nodes.workspace(activeWorkspace));
+            }
         } else {
+            if (ws.locked) { return }
             if (workspace_tabs.contains(ws.id)) {
                 workspace_tabs.removeTab(ws.id);
             }
@@ -535,16 +750,46 @@ RED.workspaces = (function() {
         }
     }
 
+    function moveWorkspace(id, direction) {
+        const workspace = RED.nodes.workspace(id||activeWorkspace) || RED.nodes.subflow(id||activeWorkspace);
+        if (!workspace) {
+            return;
+        }
+        const currentOrder = workspace_tabs.listTabs()
+        const oldOrder = [...currentOrder]
+        const currentIndex = currentOrder.findIndex(id => id === workspace.id)
+        currentOrder.splice(currentIndex, 1)
+        if (direction === 'start') {
+            currentOrder.unshift(workspace.id)
+        } else if (direction === 'end') {
+            currentOrder.push(workspace.id)
+        }
+        const newOrder = setWorkspaceOrder(currentOrder)
+        if (JSON.stringify(newOrder) !== JSON.stringify(oldOrder)) {
+            RED.history.push({
+                t:'reorder',
+                workspaces: {
+                    from:oldOrder,
+                    to:newOrder
+                },
+                dirty:RED.nodes.dirty()
+            });
+            const filteredOldOrder = oldOrder.filter(id => !!RED.nodes.workspace(id))
+            const filteredNewOrder = newOrder.filter(id => !!RED.nodes.workspace(id))
+            if (JSON.stringify(filteredOldOrder) !== JSON.stringify(filteredNewOrder)) {
+                RED.nodes.dirty(true);
+            }
+        }
+    }
     function setWorkspaceOrder(order) {
-        var newOrder = order.filter(function(id) {
-            return RED.nodes.workspace(id) !== undefined;
-        })
+        var newOrder = order.filter(id => !!RED.nodes.workspace(id))
         var currentOrder = RED.nodes.getWorkspaceOrder();
         if (JSON.stringify(newOrder) !== JSON.stringify(currentOrder)) {
             RED.nodes.setWorkspaceOrder(newOrder);
             RED.events.emit("flows:reorder",newOrder);
         }
         workspace_tabs.order(order);
+        return newOrder
     }
 
     function flashTab(tabId) {
@@ -590,6 +835,11 @@ RED.workspaces = (function() {
         active: function() {
             return activeWorkspace
         },
+        isLocked: function(id) {
+            id = id || activeWorkspace
+            var ws = RED.nodes.workspace(id) || RED.nodes.subflow(id)
+            return ws && ws.locked
+        },
         selection: function() {
             return workspace_tabs.selection();
         },
@@ -646,6 +896,8 @@ RED.workspaces = (function() {
             workspace_tabs.resize();
         },
         enable: enableWorkspace,
-        disable: disableWorkspace
+        disable: disableWorkspace,
+        lock: lockWorkspace,
+        unlock: unlockWorkspace
     }
 })();
